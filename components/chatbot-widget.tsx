"use client"

import type React from "react"
import { useRef, useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { MessageCircle, X, Send } from "lucide-react"
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
} from "@/components/ui/dropdown-menu"

interface Message {
  id: string
  text: string
  isUser: boolean
  timestamp: Date
}

const PROMPTS = {
  clubByMajor:
    "G·ª£i √Ω CLB theo ng√†nh: H√£y ƒë·ªÅ xu·∫•t c√°c c√¢u l·∫°c b·ªô ph√π h·ª£p v·ªõi chuy√™n ng√†nh [nh·∫≠p chuy√™n ng√†nh], l√Ω do ph√π h·ª£p v√† y√™u c·∫ßu tham gia.",
  eventsByMajor:
    "S·ª± ki·ªán ng√†nh: Li·ªát k√™ c√°c s·ª± ki·ªán s·∫Øp/ƒëang di·ªÖn ra c·ªßa c√°c CLB thu·ªôc chuy√™n ng√†nh [nh·∫≠p chuy√™n ng√†nh], k√®m th·ªùi gian, ƒë·ªãa ƒëi·ªÉm, ƒëi·ªÉm t√≠ch l≈©y.",
  newEventContent:
    "N·ªôi dung event m·ªõi: G·ª£i √Ω ch·ªß ƒë·ªÅ & m√¥ t·∫£ s·ª± ki·ªán cho CLB [t√™n CLB]/ng√†nh [nh·∫≠p chuy√™n ng√†nh] sao cho KH√îNG tr√πng v·ªõi c√°c s·ª± ki·ªán ƒë√£ c√≥; n√™u kh√°c bi·ªát v√† gi√° tr·ªã mang l·∫°i.",
}

export function ChatbotWidget() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa SCLMS. Hi·ªán t·∫°i t√≠nh nƒÉng n√†y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.",
      isUser: false,
      timestamp: new Date(),
    },
  ])
  const [inputValue, setInputValue] = useState("")
  const inputRef = useRef<HTMLInputElement>(null)

  const handleSendMessage = () => {
    if (!inputValue.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      isUser: true,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputValue("")

    setTimeout(() => {
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: "C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m! T√≠nh nƒÉng chatbot AI ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn v√† s·∫Ω s·ªõm ra m·∫Øt. Vui l√≤ng quay l·∫°i sau nh√©! üöÄ",
        isUser: false,
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, botMessage])
    }, 1000)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleSendMessage()
    }
  }

  const applyPrompt = (text: string) => {
    setInputValue(text)
    // ƒê∆∞a focus v·ªÅ √¥ nh·∫≠p ƒë·ªÉ ng∆∞·ªùi d√πng s·ª≠a r·ªìi g·ª≠i
    requestAnimationFrame(() => inputRef.current?.focus())
  }

  return (
    <>
      {/* Chatbot Toggle Button */}
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          variant="outline"
          size="icon"
          className="h-12 w-12 bg-green-200 shadow-lg hover:shadow-xl transition-shadow"
          onClick={() => setIsOpen(!isOpen)}
        >
          <MessageCircle className="h-6 w-6" />
        </Button>
      </div>

      {/* Chatbot Interface */}
      {isOpen && (
        <div className="fixed bottom-20 right-6 z-50 w-80 max-w-[calc(100vw-2rem)]">
          <Card className="shadow-xl border-2">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg">AI Assistant</CardTitle>
                <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => setIsOpen(false)}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Messages */}
              <ScrollArea className="h-64 w-full pr-4">
                <div className="space-y-3">
                  {messages.map((message) => (
                    <div key={message.id} className={`flex ${message.isUser ? "justify-end" : "justify-start"}`}>
                      <div
                        className={`max-w-[80%] rounded-lg px-3 py-2 text-sm ${
                          message.isUser ? "bg-primary text-primary-foreground" : "bg-muted text-muted-foreground"
                        }`}
                      >
                        {message.text}
                      </div>
                    </div>
                  ))}
                </div>
              </ScrollArea>

              {/* Input + Actions */}
              <div className="flex gap-2 items-center">
                {/* Dropdown trigger ngay b√™n tr√°i n√∫t g·ª≠i */}
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="outline"
                      size="icon"
                      aria-label="G·ª£i √Ω nhanh"
                      title="G·ª£i √Ω nhanh"
                      className="min-w-10"
                    >
                      {/* Hi·ªÉn th·ªã ƒë√∫ng k√Ω t·ª± " \/" nh∆∞ y√™u c·∫ßu */}
                      <span className="text-sm leading-none select-none">\/</span>
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent side="top" align="end" sideOffset={8} className="w-56">
                    {/* T√™n r√∫t g·ªçn cho menu */}
                    <DropdownMenuItem onSelect={() => applyPrompt(PROMPTS.clubByMajor)}>
                      CLB theo ng√†nh
                    </DropdownMenuItem>
                    <DropdownMenuItem onSelect={() => applyPrompt(PROMPTS.eventsByMajor)}>
                      S·ª± ki·ªán ng√†nh
                    </DropdownMenuItem>
                    <DropdownMenuItem onSelect={() => applyPrompt(PROMPTS.newEventContent)}>
                      N·ªôi dung event m·ªõi
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>

                <Input
                  placeholder="Nh·∫≠p tin nh·∫Øn..."
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                  ref={inputRef}
                />
                <Button size="icon" onClick={handleSendMessage} aria-label="G·ª≠i">
                  <Send className="h-4 w-4" />
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </>
  )
}
